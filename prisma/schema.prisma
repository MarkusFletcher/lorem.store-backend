// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  email       String    @unique
  password    String
  login       String    @unique
  name        String?
  avatarPath  String    @default("/uploads/default-avatar.png") @map("avatar_path")
  phone       String?

  orders      Order[]
  favorites   Product[]
  reviews     Review[]
}

model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  name        String    @unique
  code        String    @unique
  description String
  price       Int
  images      String[]

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?      @map("category_id")

  reviews     Review[]
  orderItems  OrderItem[]

  favoriteForUser   User?   @relation(fields: [favoriteForUserId], references: [id])
  favoriteForUserId Int?    @map("favorite_for_user_id")
}

model Category {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  name        String    @unique
  code        String    @unique

  products    Product[]
}

model Review {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  rating      Int
  text        String

  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?      @map("user_id")

  product     Product?  @relation(fields: [productId], references: [id])
  productId   Int?      @map("product_id")
}

model Order {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  status      EnumOrderStatus @default(NEW)
  items       OrderItem[]

  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?      @map("user_id")
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  quantity    Int
  price       Int

  product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?       @map("product_id")

  order       Order?    @relation(fields: [orderId], references: [id])
  orderId     Int?      @map("order_id")
}

enum EnumOrderStatus {
  NEW
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}